generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id           String    @id @default(cuid())
//   clerkUserId  String    @unique
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
//   userInfo     UserInfo?
// }

// model UserInfo {
//   id          String   @id @default(cuid())
//   userId      String   @unique
//   user        User     @relation(fields: [userId], references: [id])
//   firstName   String
//   lastName    String
//   email       String   @unique
//   phone       String?
//   address     String?
//   city        String?
//   country     String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model User {
  id String @id @default(cuid())
  clerkId String @unique
  email String
  resumes Resume[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  title String
  personalDetails PersonalDetails?
  summary Summary?
  experiences Experience[]
  projects Project[]
  educations Education[]
  skills Skill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalDetails {
  id String @id @default(cuid())
  resumeId String @unique
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  email     String
  phone     String?
  jobTitle  String
  socialLink   String?
}

model Summary {
  id String @id @default(cuid())
  resumeId String @unique
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  content   String
}

model Experience {
  id String @id @default(cuid())
  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobTitle String
  company String
  location String?
  startDate String
  endDate String?
  current Boolean  @default(false)
  description String
}

model Project {
  id String @id @default(cuid())
  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name        String
  description String
  url         String?
  startDate   String?
  endDate     String?
}

model Education {
  id String @id @default(cuid())
  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  institution String
  degree String
  field String?
  startDate String
  endDate String?
  current Boolean  @default(false)
}

model Skill {
  id String @id @default(cuid())
  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name String
}